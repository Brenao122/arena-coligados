// Script para corrigir erros de encoding em todo o projeto
const fs = require('fs');
const path = require('path');

// Mapeamento de caracteres mal codificados
const encodingMap = {
  '√É¬ß': '√ß',
  '√É¬£': '√£', 
  '√É¬°': '√°',
  '√É¬©': '√©',
  '√É¬≠': '√≠',
  '√É¬≥': '√≥',
  '√É¬∫': '√∫',
  '√É¬¢': '√¢',
  '√É¬™': '√™',
  '√É¬¥': '√¥',
  '√É ': '√†',
  '√É¬ß': '√ß',
  '√É¬£': '√£',
  '√É¬°': '√°',
  '√É¬©': '√©',
  '√É¬≠': '√≠',
  '√É¬≥': '√≥',
  '√É¬∫': '√∫',
  '√É¬¢': '√¢',
  '√É¬™': '√™',
  '√É¬¥': '√¥',
  '√É ': '√†',
  '√É¬ß': '√ß',
  '√É¬£': '√£',
  '√É¬°': '√°',
  '√É¬©': '√©',
  '√É¬≠': '√≠',
  '√É¬≥': '√≥',
  '√É¬∫': '√∫',
  '√É¬¢': '√¢',
  '√É¬™': '√™',
  '√É¬¥': '√¥',
  '√É ': '√†'
};

function corrigirEncoding(texto) {
  let resultado = texto;
  for (const [errado, correto] of Object.entries(encodingMap)) {
    resultado = resultado.replace(new RegExp(errado, 'g'), correto);
  }
  return resultado;
}

function processarArquivo(caminhoArquivo) {
  try {
    const conteudo = fs.readFileSync(caminhoArquivo, 'utf8');
    const conteudoCorrigido = corrigirEncoding(conteudo);
    
    if (conteudo !== conteudoCorrigido) {
      fs.writeFileSync(caminhoArquivo, conteudoCorrigido, 'utf8');
      console.log(`‚úÖ Corrigido: ${caminhoArquivo}`);
      return true;
    }
    return false;
  } catch (error) {
    console.error(`‚ùå Erro ao processar ${caminhoArquivo}:`, error.message);
    return false;
  }
}

function processarDiretorio(diretorio) {
  let arquivosCorrigidos = 0;
  
  try {
    const itens = fs.readdirSync(diretorio);
    
    for (const item of itens) {
      const caminhoCompleto = path.join(diretorio, item);
      const stat = fs.statSync(caminhoCompleto);
      
      if (stat.isDirectory()) {
        // Pular node_modules e outros diret√≥rios desnecess√°rios
        if (!['node_modules', '.git', '.next', 'dist', 'build'].includes(item)) {
          arquivosCorrigidos += processarDiretorio(caminhoCompleto);
        }
      } else if (stat.isFile() && (item.endsWith('.tsx') || item.endsWith('.ts') || item.endsWith('.js') || item.endsWith('.jsx'))) {
        if (processarArquivo(caminhoCompleto)) {
          arquivosCorrigidos++;
        }
      }
    }
  } catch (error) {
    console.error(`‚ùå Erro ao processar diret√≥rio ${diretorio}:`, error.message);
  }
  
  return arquivosCorrigidos;
}

function main() {
  console.log('üîß Iniciando corre√ß√£o de encoding...');
  
  const diretorios = ['components', 'app'];
  let totalCorrigidos = 0;
  
  for (const dir of diretorios) {
    if (fs.existsSync(dir)) {
      console.log(`\nüìÅ Processando diret√≥rio: ${dir}`);
      totalCorrigidos += processarDiretorio(dir);
    }
  }
  
  console.log(`\n‚úÖ Corre√ß√£o conclu√≠da! ${totalCorrigidos} arquivos corrigidos.`);
  
  if (totalCorrigidos > 0) {
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Verificar se as corre√ß√µes est√£o corretas');
    console.log('2. Testar o site para garantir que tudo funciona');
    console.log('3. Fazer commit das corre√ß√µes');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = { corrigirEncoding, processarArquivo, processarDiretorio };
